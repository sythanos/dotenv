:PROPERTIES:
:ID:       fa113cbd-e8d3-42c5-97ae-eaa82a8257ec
:END:
#+TITLE: ⚙️ My Config
#+PROPERTY: header-args:emacs-lisp :tangle ~/.doom.d/config.el
#+STARTUP: fold

* Emacs
:PROPERTIES:
:ID:       ef84f824-9440-42b2-b69d-bc07aa10c5ef
:END:
** Headers
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle "~/.doom.d/packages.el"
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src


#+begin_src emacs-lisp :tangle "~/.doom.d/init.el"
;;; init.el -*- lexical-binding: t; -*-
#+end_src

** Packages
#+begin_src emacs-lisp :tangle "~/.doom.d/init.el"
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax                    ; tasing you for every semicolon you forget
       (spell +flyspell +aspell) ; tasing you for misspelling mispelling
       ;;grammar                   ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp                 ; M-x vscode
       magit               ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       (dart +flutter +lsp)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pretty)       ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

** General
#+begin_src emacs-lisp
(setq user-full-name "Urban Avsec"
      user-mail-address "urban.avsec@outlook.com")
#+end_src

Let's define some useful path varialbes for rest of configuration
#+begin_src emacs-lisp

(defvar urb/iCloud-path "~/Library/Mobile Documents/com~apple~CloudDocs/")

#+end_src

Just force the ~visual-line-mode~ on org. Based in [[https://github.com/hlissner/doom-emacs/issues/401][#401]] issue this should be added to =init.el= not config.
#+begin_src emacs-lisp :tangle ~/.doom.d/init.el
(setq evil-respect-visual-line-mode t)

#+end_src

Allow the use of native fullscreen window in Mac Emacs
#+begin_src emacs-lisp

(setq ns-use-native-fullscreen t)

#+end_src

** UI

Set ups the main theme of my emacs
#+begin_src emacs-lisp

(setq doom-theme 'doom-gruvbox)
(setq display-line-numbers-type t)

#+end_src

Also change my font and font size
#+begin_src emacs-lisp

(setq doom-font
      (font-spec :family "Fira Code" :size 15))

#+end_src

** Tools
I want to allow emacs to read and display epubs. For this I need to download nov.el package.
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el

(package! nov)

#+end_src

And enable the package when opening epub files.
#+begin_src emacs-lisp

(use-package! nov
  :mode ("\\.epub\\'" . nov-mode))

#+end_src

I am also using anki to learn new languages and to improve rote memorization's. For easier creation of notes I want to install /anki-editor/ package.
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el

(package! anki-editor)

#+end_src

Next I configure the anki-editor
#+begin_src emacs-lisp

(use-package! anki-editor
  :after org
  :config
  (setq anki-editor-create-decks t))

#+end_src

*** Mu4e Configurations
Emacs is also my mail client. I am using mu4e for this job. I need to configure my contexts to be used in the mail per account.
#+begin_src emacs-lisp

(after! mu4e
  (set-email-account! "outlook"
                      '((mu4e-sent-folder        . "/outlook/Sent")
                        (mu4e-drafts-folder      . "/outlook/Drafts")
                        (mu4e-trash-folder       . "/outlook/Trash")
                        (mu4e-refile-folder      . "/outlook/AllMail")
                        (smtpmail-smtp-user      . "urban.avsec@outlook.com")
                        (mu4e-compose-signature  . "---\nKind Regards\nUrban Avsec"))
                      t)
  (set-email-account! "icloud"
                      '((mu4e-sent-folder        . "/icloud/Sent")
                        (mu4e-drafts-folder      . "/icloud/Drafts")
                        (mu4e-trash-folder       . "/icloud/Trash")
                        (mu4e-refile-folder      . "/icloud/AllMail")
                        (smtpmail-smtp-user      . "urban.avsec@icloud.com")
                        (mu4e-compose-signature  . "---\nKind Regards\nUrban Avsec"))
                      t))

#+end_src

To send email I am using msmtp. I need to connect mu4e wit msmtp
#+begin_src emacs-lisp

(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))
#+end_src

** Org

Let's first define some important paths and then set the ~org-directory~, which must be set before org loads up.
#+begin_src emacs-lisp

(defvar urb/cortex-dir (concat urb/iCloud-path "Cortex/"))
(defvar urb/cortex-dailies-dir (concat urb/cortex-dir "Journal/"))
(setq org-directory urb/cortex-dir)

#+end_src

I also want to enable my habits org module to allow tracking of habits in org.
#+begin_src emacs-lisp

(after! org
  (add-to-list 'org-modules 'org-habit))

#+end_src

And now to more specific config.

*** Styling my org pages

I want to customize my org keywords
#+begin_src emacs-lisp

(after! org
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "red" :weight bold))))

#+end_src

I also overwrite some UI display faces for some org elements
#+begin_src emacs-lisp

(custom-theme-set-faces
 'user
 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :foreground "dark orange" :height 0.9)))))

#+end_src

I also want to auto-display all inline images and latex fragments like equations.
#+begin_src emacs-lisp

(after! org
  (setq org-startup-with-inline-images t
        org-startup-with-latex-preview t))

#+end_src

I also want to auto-preview latex as soon as I leave the code block. For this I need to install a new pacakge /org-fragtog/
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el

(package! org-fragtog)

#+end_src

And then enable it.
#+begin_src emacs-lisp

(use-package! org-fragtog
  :init (add-hook 'org-mode-hook 'org-fragtog-mode))

#+end_src

*** Auto Tangle My Main Configuration File

#+begin_src emacs-lisp

(defun urb/org-babel-tangle-my-configs ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotenv/README.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'urb/org-babel-tangle-my-configs)))

#+end_src

*** Citations in Org Files

Let's first define path to my =.bib= file and location where my pdfs and epubs will be stored
#+begin_src emacs-lisp
(defvar urb/reference-files (list (concat urb/iCloud-path "Library/References.bib")))
(defvar urb/reference-sources-dirs (list(concat urb/iCloud-path "Library/Files/")))

#+end_src

Let's install ~citar~ pacakge which will offer the UI interface for interacting with my bibtex file.
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el

(package! citar)

#+end_src

Configure ~citar~ pacakge to work in org mode
#+begin_src emacs-lisp
(use-package! citar
  :after org
  :no-require
  :config
  (setq org-cite-insert-processor 'citar
        org-cite-follow-processor 'citar
        org-cite-activate-processor 'citar)
  (setq citar-symbols
      `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
        (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
        (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
  (setq citar-symbol-separator "  ")
  (setq citar-bibliography urb/reference-files
        citar-library-paths urb/reference-sources-dirs))
#+end_src

Finally setup Org Cite package to enable the citations
#+begin_src emacs-lisp

(use-package! oc
  :after citar
  :defer t
  :config
  (setq org-cite-global-bibliography urb/reference-files))

#+end_src

Use the ~org-cite~ processors
#+begin_src emacs-lisp

(use-package! oc-biblatex :after oc)

#+end_src

Let's also install ~org-ref~ to get bibtex support functions
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el

(package! org-ref)

#+end_src

And finally enable it
#+begin_src emacs-lisp

(use-package! org-ref :after org)

#+end_src

Configure bibtex completion paths

#+begin_src emacs-lisp

(after! org-ref
  (setq bibtex-completion-bibliography urb/reference-files))

#+end_src

Provide some good keybinds
#+begin_src emacs-lisp

(map! (:map org-mode-map
       :leader
       :prefix ("R" . "cite & ref")
       "n" #'citar-open-notes
       "i" #'org-cite-insert
       "I" #'isbn-to-bibtex
       "R" #'citar-refresh))

#+end_src

*** Let's Make It Pretty with Org-Download

Install ~org-download~
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el

(package! org-download)

#+end_src

And Enable it
#+begin_src emacs-lisp

(use-package! org-download)

#+end_src

The ~org-download~ should download all photos and other media in =/{org-dir}/Media= folder with some basic default settings.
#+begin_src emacs-lisp

(after! org
  :config
  (setq-default org-download-image-dir "Media"
        org-download-heading-lvl nil)
  (setq org-download-method 'directory
        org-download-timestamp "_%Y%m%d_%H%M%S"
        org-download-screenshot-method
          (cond (IS-MAC "screencapture -i %s"))
        org-download-annotate-function (lambda (_link) "#+ATTR_ORG: :width 300px\n")))

#+end_src

Finally provide keymaps to easily add pictures while I write my org files
#+begin_src emacs-lisp

(after! org
    (map! (:map org-mode-map
          :leader
          :prefix ("nr" . "org-roam")
          "S" #'org-download-screenshot)))

#+end_src
*** Get Organized With Org Agenda

I want to add all of my org files in my cortex to agenda files
#+begin_src emacs-lisp

(after! org
  (setq org-agenda-files (list
                          (concat urb/cortex-dir "Tasks.org")
                          (concat urb/cortex-dir "Agenda.org"))))

#+end_src

I have two real workflows in my org files:
+ Task Workflow - Simple Five-State Workflow for tasks I want to finish. It uses letter keywords to signal task completion. It has two active states ~TODO~ and ~NEXT~ where ~NEXT~ is the selected next action. The finished tasks are labeled as ~DONE~. The workflow has 1 short-term pause key-word ~WAIT~ and 1 long-term pause keyword ~QUIT~.
+ Research Workflow - This is a flow I use in my Notes to list what actions, questions, and next steps I want to do when I am further researching the topics they cover. I use emojis to encode the information
  - 📚 Represents reference and further reading on this topic
  - ❓ A question that got while processing content of this note. Means I hope to research further to answer the question
  - 🤔 A personal thought or opinion but not yet convinced to create a new note about it. This is nursery for my thoughts.
    #+begin_src emacs-lisp

  (after! org
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "WAIT(w@)" "|" "DONE(d!)" "QUIT(Q@)")
            (sequence "📚(r)" "❓(q)" "🤔(a)" "|" "✅(y)"))))

    #+end_src

*** Org Roam

Installs ~org-roam~ from the gitrepo. To refresh the package ~doom sync~ must be called.
#+begin_src emacs-lisp :tangle "~/.doom.d/packages.el"

(package! org-roam
  :recipe (:host github :repo "org-roam/org-roam"
           :files (:defaults "extensions/*")))

#+end_src

Loads ~org-roam~ package and provides basic configuration
#+begin_src emacs-lisp

(use-package! org-roam
  :init
  (setq org-roam-v2-ack t)
  :config
  (setq org-roam-directory urb/cortex-dir)
  (org-roam-setup))


#+end_src

Provides the key bindings for org-roam in my system
#+begin_src emacs-lisp

(map! (:map org-mode-map
        :leader
        :prefix ("nr" . "org-roam")
        "f" #'org-roam-node-find
        "i" #'org-roam-node-insert
        "I" #'org-id-get-create
        "s" #'org-roam-db-sync
        "m" #'org-roam-buffer-toggle))

#+end_src

I use two core templates for new org-roam nodes.
+ /Note/ - Is the plain note template for general purpose note placed in the root of my cortex.
+ /Reference/ - Is a structured note template for notes which track my processed references and bibliography.
#+begin_src emacs-lisp

(after! org-roam
  (setq org-roam-capture-templates
        '(("n" "Note" plain "%?"
           :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
           :unnarrowed t)
          ("r" "Reference" plain "%?"
           :target (file+head "Literature/${citekey}.org"
                              "#+TITLE: ${title}\n#+STARTUP: latexpreview\n#+FILETAGS: Reference\n \n* Summary\n* Notes\n")
           :unnarrowed t))))

#+end_src

I use a special file [[id:187c187f-d3bd-4b66-aa27-32b0f0f4e58a][📓 Journal]] to keep my journal entries. I do use `datetree` organisation.
#+begin_src emacs-lisp

(after! org-capture
  (setq org-capture-templates
        '(("j" "Journal Entry" entry
           (file+datetree "Journal.org")
           "* %<%H:%M>%?%i" :unnarrowed t :tree-type week)
          ("t" "New Task" entry
           (file "Inbox.org")
           "* TODO %?%i"))))

#+end_src

**** Org Roam Bibtex

Integrate ~org-roam~ with my citations using ~org-roam-bibtex~

Firstly install ~org-roam-bibtex~ from repo

#+begin_src emacs-lisp :tangle "~/.doom.d/packages.el"

(package! org-roam-bibtex
  :recipe (:host github :repo "org-roam/org-roam-bibtex"))

#+end_src

Then enable the package and integrate it with the ~citar~ citation procesor. For its config look at [[Citations in Org Files]] section.

#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after org-roam
  :config
  (setq citar-open-note-function 'orb-citar-edit-note
        citar-notes-paths (list org-roam-directory))
  (org-roam-bibtex-mode))

#+end_src

Adds the core keybindings for interraction with references from emacs

#+begin_src emacs-lisp
(map! (:map org-mode-map
       :leader
       :prefix ("R" . "cite & ref")
       "a" #'orb-note-actions))

#+end_src

**** Org Roam UI

Get the package
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el

(package! org-roam-ui
  :recipe (:host github :repo "org-roam/org-roam-ui"
           :files ("*.el" "out")))

#+end_src

Then enable the websocket package
#+begin_src emacs-lisp

(use-package! websocket :after org-roam)

#+end_src

Finally configure ~org-roam-ui~
#+begin_src emacs-lisp

(use-package! org-roam-ui
  :after org-roam org-ref
  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follor t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))


#+end_src

*** Searching my notes with help of Deft

I want to use my cortex directory as the target folder for /deft/. I also strip org metadata from the deft window.
#+begin_src emacs-lisp

(after! deft
  (setq deft-directory urb/cortex-dir
        deft-use-filename-as-title nil
        deft-recursive t
        deft-strip-summary-regexp
        (concat "\\("
                "^:.+:.*\n" ; any line with a :SOMETHING:
                "\\|^\\*.+.*\n" ; anyline where an asterisk starts the line
                "\\)")))

#+end_src

Next I change how I display title in deft.
#+begin_src emacs-lisp

(defun urb/deft-parse-title (file contents)
  "Parses the FILE and CONTENTS and determines the title shown on the deft search interface."
    (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
      (if begin
          (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
        (deft-base-filename file))))

(after! deft
  (advice-add 'deft-parse-title :override #'urb/deft-parse-title))

#+end_src
* Mail
I use mbsync to sync the files to my .maildir folder and I use msmtp to send new files. The configuration per account is listed bellow.
** Headers
#+begin_src rcfile :tangle ~/.msmtprc
defaults
logfile ~/.maildir/msmtp.log

#+end_src

** urban.avsec@outlook.com
*** mbsync settings
#+begin_src rcfile :tangle ~/.mbsyncrc
# ==================== Outlook ==========================
IMAPAccount outlook
Host outlook.office365.com
User urban.avsec@outlook.com
PassCmd "security find-generic-password -s mbsync-outlook -a urban.avsec@outlook.com -w"
Port 993
SSLType IMAPS
SSLVersions TLSv1.2
# Increase Timeout to avoid o365 IMAP timeouts
Timeout 120
PipelineDepth 50

IMAPStore outlook-remote
Account outlook

MaildirStore outlook-local
SubFolders Verbatim
Path ~/.maildir/outlook/
Inbox ~/.maildir/outlook/Inbox

Channel outlook
Far :outlook-remote:
Near :outlook-local:
Patterns *
Create Near
Sync All
Expunge Both
SyncState *

#+end_src

*** msmtp settings
#+begin_src rcfile :tangle ~/.msmtprc
# ==================== Outlook ==========================

account outlook
auth on
host smtp-mail.outlook.com
port 587
protocol smtp
from urban.avsec@outlook.com
user urban.avsec@outlook.com
passwordeval security find-generic-password -s mbsync-outlook -a urban.avsec@outlook.com -w
tls on
tls_starttls on

#+end_src
** urban.avsec@icloud.com
*** mbsync settings
#+begin_src rcfile :tangle ~/.mbsyncrc
# ==================== iCloud ==========================
IMAPAccount icloud
Host imap.mail.me.com
User urban.avsec
PassCmd "security find-generic-password -s mbsync-icloud-password -a urban.avsec -w"
Port 993
SSLType IMAPS
SSLVersions TLSv1.2
AuthMechs PLAIN

IMAPStore icloud-remote
Account icloud

MaildirStore icloud-local
SubFolders Verbatim
Path ~/.maildir/icloud/
Inbox ~/.maildir/icloud/Inbox

Channel icloud
Far :icloud-remote:
Near :icloud-local:
Patterns *
Create Near
Sync All
Expunge Both
SyncState *

#+end_src
*** msmtp settings
#+begin_src rcfile :tangle ~/.msmtprc
# ==================== iCloud ==========================

account icloud
auth on
host smtp.mail.me.com
port 465
protocol smtp
from urban.avsec@icloud.com
user urban.avsec
passwordeval security find-generic-password -s mbsync-icloud-password -a urban.avsec -w
tls on
tls_starttls off

#+end_src

** Footnotes
#+begin_src rcfile :tangle ~/.mbsyncrc
# ===================== End ===========================
#+end_src

#+begin_src rcfile :tangle ~/.msmtprc
# ===================== End ===========================
account default : outlook
#+end_src
